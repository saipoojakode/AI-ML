# -*- coding: utf-8 -*-
"""spam filtering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oYtLRSRbPFK0XmbXy1oHXTbsTlXz8mYC
"""

!pip install pandas numpy scikit-learn gradio

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import gradio as gr

df = pd.read_csv('/content/spam.csv', encoding="latin1")

# keep only required columns
df = df[['v1', 'v2']]
df = df.rename(columns={'v1':'label', 'v2':'message'})

df.info()
df['label'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['label_num'] = le.fit_transform(df['label']) #ham=0, spam=1
df.head()

# split
X_train, X_test, y_train, y_test = train_test_split(
    df["message"], df["label_num"],
    test_size=0.2, random_state=42, stratify=df["label_num"])

vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = LogisticRegression()
model.fit(X_train_vec, y_train)

y_pred = model.predict(X_test_vec)

accuracy = accuracy_score(y_test, y_pred)
print(f"model Accuracy: {accuracy:.2f}")

def predict(text):
  #Transform input text using the same vectorizer
  input_data = vectorizer.transform([text])

  # Predict using the logistic regression model
  prediction = model.predict(input_data)
  # Map prediction to class label
  return "spam" if prediction[0] ==1 else "not spam"

interface = gr.Interface(
    fn=predict,
    inputs=gr.Textbox(lines=2, placeholder="Enter email content here.."),
    outputs="text",
    title="Email spam Detector",
    description="Enter the content of an email to classify it as spam or not spam."
)

interface.launch(share=True)